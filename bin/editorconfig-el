#!/bin/sh
:;#-*-Emacs-Lisp-*-
:;test -n "$EMACS" || EMACS=emacs
:;exec "$EMACS" -batch -Q --eval '(setq debug-on-error t)' -l "$0" -- "$@"

(require 'cl)

(when (getenv "EDITORCONFIG_CORE_LIBRARY_PATH")
  (setq load-path
        (append (split-string (getenv "EDITORCONFIG_CORE_LIBRARY_PATH")
                             ":")
               load-path)))

(require 'editorconfig-core)

(defun editorconfig-bin-parse-args
    (argv &optional confname version)
  "Parse arguments and return list.

List returned will be looked like (FILES CONFNAME VERSION).
If either -v, --version, -h or --help option apprears, exit emacs immediately
with required output."
  (cl-case (intern (car argv))
    (-f
     (editorconfig-bin-parse-args (cddr argv)
                                  (cadr argv)
                                  version))
    (-b
     (editorconfig-bin-parse-args (cddr argv)
                                  confname
                                  (cadr argv)))
    ((-h --help)
     (message "usage: editorconfig-el ...")
     (kill-emacs 0))
    ((-v --version)
     (message "EditorConfig Version %s"
              editorconfig-core-version)
     (kill-emacs 0))

    (otherwise
     (when (and argv
                (string-match-p "^-"
                                (car argv)))
       (error "Invalid option: %s"
              (car argv)))
     (list argv
           confname
           version))
    ))

(defun main (argv)
  (let ((parsed (editorconfig-bin-parse-args argv)))
    (cl-case (length (car parsed))
      (0
       nil)
      (1
       (dolist (p (editorconfig-core-get-properties (caar parsed)
                                                    (nth 1 parsed)
                                                    (nth 2 parsed)))
         (message "%s=%s"
                  (car p)
                  (cdr p))))
      (otherwise
       (dolist (file (car parsed))
         (message "[%s]"
                  file)
         (dolist (p (editorconfig-core-get-properties file
                                                      (nth 1 parsed)
                                                      (nth 2 parsed)))
           (message "%s=%s"
                    (car p)
                    (cdr p)))))))
  0)

;; car of command-line-args-left is "--"
(kill-emacs (main (cdr command-line-args-left)))
